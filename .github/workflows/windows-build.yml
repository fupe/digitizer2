name: Windows Qt build (MinGW) + deploy (aqt)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: windows-latest

    env:
      QT_VERSION: "5.14.2"
      QT_ARCH: "win64_mingw73"      # Qt 5.14.2 + MinGW 7.3
      MINGW_TOOL: "qt.tools.win64_mingw730"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python (stable)
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install aqt + 7zip
        run: |
          python -m pip install --upgrade pip
          pip install "aqtinstall==3.1.*"
          choco install 7zip -y

      # Qt
      - name: Install Qt with aqt
        shell: bash
        run: |
          python -m aqt install-qt windows desktop "$QT_VERSION" "$QT_ARCH" -O C:\Qt

      # MinGW nástroje (gcc, mingw32-make)
      - name: Install MinGW toolchain
        shell: bash
        run: |
          python -m aqt install-tool windows desktop tools_mingw "$MINGW_TOOL" -O C:\Qt

      - name: Add Qt and MinGW to PATH
        shell: pwsh
        run: |
          $qtBin = "C:\Qt\${env:QT_VERSION}\mingw73_64\bin"
          $mingwBin = "C:\Qt\Tools\mingw730_64\bin"
          echo "QT_BIN=$qtBin" >> $env:GITHUB_ENV
          echo "MINGW_BIN=$mingwBin" >> $env:GITHUB_ENV
          echo "$qtBin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "$mingwBin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # DŮLEŽITÉ: ukaž Qt pluginům cestu (kvůli qwindows.dll)
      - name: Export QT_PLUGIN_PATH
        shell: pwsh
        run: |
          $qtPlugins = "C:\Qt\${env:QT_VERSION}\mingw73_64\plugins"
          echo "QT_PLUGIN_PATH=$qtPlugins" >> $env:GITHUB_ENV

      - name: Show tool versions (debug)
        shell: bash
        run: |
          qmake -v
          which qmake || where qmake
          where mingw32-make
          where windeployqt

      - name: Build (qmake + mingw32-make)
        shell: bash
        run: |
          qmake digitizer2.pro CONFIG+=release
          mingw32-make -j4

      - name: Locate built EXE
        id: findexe
        shell: bash
        run: |
          EXE_PATH=$(ls -1 ./release/*.exe | head -n 1)
          if [ -z "$EXE_PATH" ]; then
            echo "No EXE found in ./release"
            exit 1
          fi
          echo "exe=$EXE_PATH" >> $GITHUB_OUTPUT

      - name: Run windeployqt (with fallback plugins copy)
        shell: bash
        run: |
          mkdir -p dist
          cp "${{ steps.findexe.outputs.exe }}" dist/
          # nasměruj výstup přímo do dist
          windeployqt --release --dir dist "dist/$(basename "${{ steps.findexe.outputs.exe }}")" || true

          # Fallback: ručně zkopíruj platform pluginy, kdyby je windeployqt nepřidal
          mkdir -p dist/plugins/platforms
          cp -f "C:/Qt/${QT_VERSION}/mingw73_64/plugins/platforms/qwindows.dll" dist/plugins/platforms/ 2>/dev/null || true

          # volitelně přidej style plugin (nevadí, když neexistuje)
          mkdir -p dist/plugins/styles
          cp -f "C:/Qt/${QT_VERSION}/mingw73_64/plugins/styles/qwindowsvistastyle.dll" dist/plugins/styles/ 2>/dev/null || true

      - name: Add MinGW runtime DLLs
        shell: pwsh
        run: |
          $dlls = @('libstdc++-6.dll','libgcc_s_seh-1.dll','libwinpthread-1.dll')
          foreach ($d in $dlls) {
            $src = Join-Path "${env:MINGW_BIN}" $d
            if (Test-Path $src) { Copy-Item $src dist/ -Force } else { Write-Host "Warning: $d not found in ${env:MINGW_BIN}" }
          }

      - name: Upload artifact (portable app)
        uses: actions/upload-artifact@v4
        with:
          name: digitizer2-windows-portable
          path: dist/**
